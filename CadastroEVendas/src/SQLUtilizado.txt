-- Cria um novo banco de dados chamado 'cadastroevendas'.
CREATE DATABASE cadastroevendas;

-- Seleciona o banco de dados 'cadastroevendas' para uso.
USE cadastroevendas;

-- Cria uma tabela chamada 'clientes' para armazenar informações dos clientes.
CREATE TABLE clientes (
    -- Coluna 'cpf' para armazenar o CPF do cliente. É a chave primária da tabela e tem tamanho de 11 caracteres.
    cpf VARCHAR(11) PRIMARY KEY,
    -- Coluna 'nome' para armazenar o nome completo do cliente. Não pode ser nulo.
    nome VARCHAR(100) NOT NULL,
    -- Coluna 'telefone' para armazenar o número de telefone do cliente. Não pode ser nulo e tem tamanho de 11 caracteres.
    telefone VARCHAR(11) NOT NULL,
    -- Coluna 'endereco' para armazenar o endereço do cliente. Não pode ser nulo e tem tamanho de 200 caracteres.
    endereco VARCHAR(200) NOT NULL
);

-- Cria uma tabela chamada 'produtos' para armazenar informações dos produtos.
CREATE TABLE produtos (
    -- Coluna 'id' para identificar unicamente cada produto. É a chave primária e é auto-incrementada.
    id INT PRIMARY KEY AUTO_INCREMENT,
    -- Coluna 'nome' para armazenar o nome do produto. Não pode ser nulo e tem tamanho de 100 caracteres.
    nome VARCHAR(100) NOT NULL,
    -- Coluna 'estoque' para armazenar a quantidade em estoque do produto. Não pode ser nulo.
    estoque INT NOT NULL,
    -- Coluna 'autor' para armazenar o autor do produto (pode ser nulo).
    autor VARCHAR(100),
    -- Coluna 'preco_compra' para armazenar o preço de compra do produto. Não pode ser nulo e tem formato decimal com 10 dígitos no total e 2 casas decimais.
    preco_compra DECIMAL(10, 2) NOT NULL,
    -- Coluna 'preco_venda' para armazenar o preço de venda do produto. Não pode ser nulo e tem formato decimal com 10 dígitos no total e 2 casas decimais.
    preco_venda DECIMAL(10, 2) NOT NULL,
    -- Coluna 'ativo' para indicar se o produto está ativo (1) ou inativo (0). O valor padrão é 1 (ativo).
    ativo TINYINT(1) DEFAULT 1
);

-- Cria uma tabela chamada 'vendas' para registrar as vendas realizadas.
CREATE TABLE vendas (
    -- Coluna 'id' para identificar unicamente cada venda. É a chave primária e é auto-incrementada.
    id INT AUTO_INCREMENT PRIMARY KEY,
    -- Coluna 'cpf_cliente' para referenciar o cliente que realizou a venda. É uma chave estrangeira referenciando a tabela 'clientes'. Pode ser nulo.
    cpf_cliente VARCHAR(11),
    -- Coluna 'data_venda' para armazenar a data em que a venda foi realizada. Não pode ser nulo.
    data_venda DATE NOT NULL,
    -- Define a coluna 'cpf_cliente' como chave estrangeira, referenciando a coluna 'cpf' da tabela 'clientes'.
    FOREIGN KEY (cpf_cliente) REFERENCES clientes(cpf)
);

-- Cria uma tabela de junção chamada 'venda_produtos' para relacionar as vendas com os produtos vendidos e suas quantidades.
CREATE TABLE venda_produtos (
    -- Coluna 'id_venda' para referenciar a venda. É uma chave estrangeira referenciando a tabela 'vendas'.
    id_venda INT,
    -- Coluna 'id_produto' para referenciar o produto vendido. É uma chave estrangeira referenciando a tabela 'produtos'.
    id_produto INT,
    -- Coluna 'quantidade' para armazenar a quantidade vendida do produto na respectiva venda. O valor padrão é 1. Não pode ser nulo.
    quantidade INT NOT NULL DEFAULT 1,
    -- Define a coluna 'id_venda' como chave estrangeira, referenciando a coluna 'id' da tabela 'vendas'.
    FOREIGN KEY (id_venda) REFERENCES vendas(id),
    -- Define a coluna 'id_produto' como chave estrangeira, referenciando a coluna 'id' da tabela 'produtos'.
    FOREIGN KEY (id_produto) REFERENCES produtos(id),
    -- Define a combinação de 'id_venda' e 'id_produto' como chave primária, garantindo que cada produto apareça apenas uma vez por venda.
    PRIMARY KEY (id_venda, id_produto)
);

-- Cria uma tabela chamada 'usuarios_admin' para armazenar informações dos usuários administradores.
CREATE TABLE usuarios_admin (
    -- Coluna 'id' para identificar unicamente cada usuário administrador. É a chave primária e é auto-incrementada.
    id INT AUTO_INCREMENT PRIMARY KEY,
    -- Coluna 'usuario' para armazenar o nome de usuário do administrador. Não pode ser nulo e deve ser único.
    usuario VARCHAR(50) NOT NULL UNIQUE,
    -- Coluna 'senha' para armazenar a senha do administrador. Não pode ser nulo e tem tamanho de 255 caracteres (para armazenar hashes de senha de forma segura).
    senha VARCHAR(255) NOT NULL
);